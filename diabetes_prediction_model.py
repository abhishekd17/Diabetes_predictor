# -*- coding: utf-8 -*-
"""Diabetes Prediction Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p6qBvvrNCE4kNXGcIVR2apFT4iWHf3Ky

Importing Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis"""

#loading the diabetes dataset to a pandas dataframe
data = pd.read_csv('/content/diabetes (1).csv')

data.head()

data.tail()

data.shape

# getting the statistical measures of the data
data.describe()

data['Outcome'].value_counts()

data.groupby('Outcome').mean()

# seperating the data and labels
X = data.drop(columns = 'Outcome' , axis = 1)
Y = data['Outcome']

print(X)

print(Y)

"""Train and Test Split"""

X_train , X_test , Y_train , Y_test = train_test_split(X , Y , test_size = 0.2 ,stratify = Y, random_state = 2)
# '''The stratify=Y parameter in the train_test_split function is used to ensure that the split of the dataset maintains the same distribution of classes in both the training and testing sets as in the original dataset.

# Reproducibility , Randomness Control ,Consistency in Experiments

print(X.shape , X_train.shape , X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel = 'linear')

# training support vector machine classifier
classifier.fit(X_train , Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction , Y_train)

print('Accuracy score of the training data : ' , training_data_accuracy )
print('In percentage : {:.2f} %'.format(training_data_accuracy * 100))

# accuracy score on the test data
x_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(x_test_prediction , Y_test)

print('Accuracy score of the testing data : ' , test_data_accuracy )
print('In percentage : {:.2f} %'.format(test_data_accuracy * 100))

"""Making a Predictive System"""

input_data= ( 5 ,166 , 72 , 19 , 175 , 25.8 , 0.587 , 51 )

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1 , -1)

prediction = classifier.predict(input_data_reshaped)

print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
cm = confusion_matrix(Y_test, classifier.predict(X_test))
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score

cm = confusion_matrix(Y_test, classifier.predict(X_test))

# Extract True Positives, False Positives, False Negatives, and True Negatives
TP = cm[1, 1]
FP = cm[0, 1]
FN = cm[1, 0]
TN = cm[0, 0]

# Calculate Precision
precision = TP / (TP + FP) if (TP + FP) != 0 else 0

# Calculate Recall
recall = TP / (TP + FN) if (TP + FN) != 0 else 0

# Calculate F1 Score
f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) != 0 else 0

print('Precision:', precision)
print('Recall:', recall)
print('F1 Score:', f1)
print()
# Alternatively, can use sklearn's built-in functions
y_pred = classifier.predict(X_test)
print('Precision (sklearn):', precision_score(Y_test, y_pred))
print('Recall (sklearn):', recall_score(Y_test, y_pred))
print('F1 Score (sklearn):', f1_score(Y_test, y_pred))

from sklearn.metrics import classification_report

y_pred = classifier.predict(X_test)
report = classification_report(Y_test, y_pred)
print(report)

# Re-train the model with class weights
classifier_weighted = svm.SVC(kernel='linear', class_weight={0: 1, 1: 2})  # Adjust weights
classifier_weighted.fit(X_train, Y_train)

# Predict and evaluate
y_pred_weighted = classifier_weighted.predict(X_test)
recall_weighted = recall_score(Y_test, y_pred_weighted)
print(f"Recall with class weights: {recall_weighted:.2f}")

from sklearn.metrics import classification_report

y_pred = classifier_weighted.predict(X_test)
report = classification_report(Y_test, y_pred)
print(report)

"""Saving the trained Model"""

import pickle
#The pickle module in Python is used for serializing and deserializing Python objects, commonly known as "pickling" and "unpickling.
#Serialization (Pickling): Converts a Python object (like a list, dictionary, or a trained model) into a byte stream that can be stored on disk or transmitted over a network.

file_name = 'diabetes_model.sav'
pickle.dump(classifier , open(file_name , 'wb'))

#loading the saved model
loaded_model = pickle.load(open('diabetes_model.sav' , 'rb'))

input_data = (5,166,72,19,175,25.8,0.587,51)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = loaded_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

for column in X.columns:
  print(column)



